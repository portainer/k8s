apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "portainer.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    io.portainer.kubernetes.application.stack: portainer
    {{- include "portainer.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: "Recreate"
  selector:
    matchLabels:
      {{- include "portainer.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "portainer.selectorLabels" . | nindent 8 }}
    spec:
      nodeSelector: {{- toYaml .Values.nodeSelector | nindent 8 -}}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "portainer.serviceAccountName" . }}
      volumes:
        - name: "data"
          persistentVolumeClaim:
            claimName: {{ template "portainer.pvcName" . }}
        {{- if .Values.tls.existingSecret }}
        - name: certs
          secret:
            secretName: {{ .Values.tls.existingSecret }}
        {{- end }}
        {{- if .Values.dbEncryption.enabled }}
        - name: db-encryption-key
          secret:
            secretName: {{ .Values.dbEncryption.secret }}
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{- if .Values.enterpriseEdition.enabled }}
          image: "{{ .Values.enterpriseEdition.image.repository }}:{{ .Values.enterpriseEdition.image.tag }}"
          imagePullPolicy: {{ .Values.enterpriseEdition.image.pullPolicy }}
          {{- else }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- end }}
          args: 
          {{- if .Values.tls.force }}
          - --http-disabled
          {{- end }}
          {{- if .Values.tls.existingSecret }}
          - --sslcert=/certs/tls.crt
          - --sslkey=/certs/tls.key
          {{- end }}
          {{- if (and (eq .Values.service.type "NodePort") (not (empty .Values.service.edgeNodePort))) }}
          - '--tunnel-port={{ .Values.service.edgeNodePort }}'
          {{- end }}
          {{- if (not (empty .Values.feature.flags)) }}
          - '{{ .Values.feature.flags }}'
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: /data
            {{- if .Values.tls.existingSecret }}
            - name: certs
              mountPath: /certs
              readOnly: true
            {{- end }}
            {{- if .Values.dbEncryption.enabled }}
            - name: db-encryption-key
              mountPath: "/run/secrets/portainer"
              subPath: portainer
            {{- end }}
          ports:
            {{- if not .Values.tls.force }}
            - name: http
              containerPort: 9000
              protocol: TCP
            {{- end }}
            - name: https
              containerPort: 9443
              protocol: TCP
            - name: tcp-edge
              containerPort: 8000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              {{- if .Values.tls.force }}
              port: 9443
              scheme: HTTPS
              {{- else }}
              port: 9000
              scheme: HTTP
              {{- end }}
          readinessProbe:
            httpGet:
              path: /
              {{- if .Values.tls.force }}
              port: 9443
              scheme: HTTPS
              {{- else }}
              port: 9000
              scheme: HTTP
              {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
